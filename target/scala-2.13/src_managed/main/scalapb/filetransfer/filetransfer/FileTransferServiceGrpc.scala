// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package filetransfer.filetransfer


object FileTransferServiceGrpc {
  val METHOD_SEND_FILE: _root_.io.grpc.MethodDescriptor[filetransfer.filetransfer.FileChunk, filetransfer.filetransfer.Ack] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("filetransfer.FileTransferService", "SendFile"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[filetransfer.filetransfer.FileChunk])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[filetransfer.filetransfer.Ack])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(filetransfer.filetransfer.FiletransferProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("filetransfer.FileTransferService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(filetransfer.filetransfer.FiletransferProto.javaDescriptor))
      .addMethod(METHOD_SEND_FILE)
      .build()
  
  trait FileTransferService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = FileTransferService
    def sendFile(request: filetransfer.filetransfer.FileChunk): scala.concurrent.Future[filetransfer.filetransfer.Ack]
  }
  
  object FileTransferService extends _root_.scalapb.grpc.ServiceCompanion[FileTransferService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[FileTransferService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = filetransfer.filetransfer.FiletransferProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = filetransfer.filetransfer.FiletransferProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: FileTransferService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_SEND_FILE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[filetransfer.filetransfer.FileChunk, filetransfer.filetransfer.Ack] {
          override def invoke(request: filetransfer.filetransfer.FileChunk, observer: _root_.io.grpc.stub.StreamObserver[filetransfer.filetransfer.Ack]): _root_.scala.Unit =
            serviceImpl.sendFile(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait FileTransferServiceBlockingClient {
    def serviceCompanion = FileTransferService
    def sendFile(request: filetransfer.filetransfer.FileChunk): filetransfer.filetransfer.Ack
  }
  
  class FileTransferServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[FileTransferServiceBlockingStub](channel, options) with FileTransferServiceBlockingClient {
    override def sendFile(request: filetransfer.filetransfer.FileChunk): filetransfer.filetransfer.Ack = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_FILE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): FileTransferServiceBlockingStub = new FileTransferServiceBlockingStub(channel, options)
  }
  
  class FileTransferServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[FileTransferServiceStub](channel, options) with FileTransferService {
    override def sendFile(request: filetransfer.filetransfer.FileChunk): scala.concurrent.Future[filetransfer.filetransfer.Ack] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_FILE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): FileTransferServiceStub = new FileTransferServiceStub(channel, options)
  }
  
  object FileTransferServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[FileTransferServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): FileTransferServiceStub = new FileTransferServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[FileTransferServiceStub] = this
  }
  
  def bindService(serviceImpl: FileTransferService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = FileTransferService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): FileTransferServiceBlockingStub = new FileTransferServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): FileTransferServiceStub = new FileTransferServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = filetransfer.filetransfer.FiletransferProto.javaDescriptor.getServices().get(0)
  
}